module Step

using Revise
using Gridap
using Gridap.Geometry
using Gridap.FESpaces
using GridapGmsh
using Parameters
using Roots

export run_Step
export Step_params

@with_kw struct Step_params
  resDir::String = "data/floating_ice/Step/"
  name::String = "Step"
  œâ::Real = 0.2
  Q::Float64 = 0.0
  step_ratio::Float64 = 0.5
  mesh_file::String = "floating_ice-Step05.json"
  n_elements::Float64 = 4
  L‚Çú‚Çí‚Çú::Float64 = 780
  # Lb::Float64 = 520
  # Ld::Float64 = 130
  # xd‚Çí·µ§‚Çú::Float64 = 650
  kguess::Float64 = 0.5
  Œº‚ÇÄ::Float64 = 2.5

end

function run_Step(params::Step_params)

  @unpack name, œâ, Q, step_ratio, mesh_file, n_elements, L‚Çú‚Çí‚Çú = params
  @unpack resDir = params

  # Fixed parameters
  h_ice = 0.1
  œÅ_ice = 917.0
  m = œÅ_ice*h_ice
  E = 5.0e9
  ŒΩ = 0.33
  I = h_ice^3/12
  EI = E*I/(1-ŒΩ^2)
  H‚ÇÄ = 10.0
  
  # Physics
  g = 9.81
  œÅ = 1025
  d‚ÇÄ = m/(œÅ*g)
  a‚ÇÅ = EI/(œÅ*g)
  a‚ÇÇ = Q*‚àöa‚ÇÅ                 # a‚ÇÇ => Q = 1.4*‚àöD with D = EI/œÅg        

  # # wave properties

  f(k) = ‚àö((a‚ÇÅ*k^4 - a‚ÇÇ*k^2 + 1) * g*k*tanh(k*H‚ÇÄ)) - œâ   # dispersion relation
  @unpack kguess = params
  @show kguess
  k = abs(find_zero(f, kguess))       # wave number
  Œª = 2*œÄ / k                         # wave length

  Ld = 2*Œª
  Lb = L‚Çú‚Çí‚Çú - 4*Œª
  xd‚Çí·µ§‚Çú = L‚Çú‚Çí‚Çú - 2*Œª

  @show œâ, Q, k, Œª, Œª/Lb, Ld  

  # Œ∑‚ÇÄ = 1
  # Œ∑·µ¢‚Çô(x) = Œ∑‚ÇÄ*exp(im*k*x[1])
  # œï·µ¢‚Çô(x) = -im*(Œ∑‚ÇÄ*œâ/k)*(cosh(k*(x[2])) / sinh(k*H‚ÇÄ))*exp(im*k*x[1])
  # v·µ¢‚Çô(x) = -1.0*(Œ∑‚ÇÄ*œâ)*(cosh(k*(x[2])) / sinh(k*H‚ÇÄ))*exp(im*k*x[1])
  # vz·µ¢‚Çô(x) = -im*œâ*Œ∑‚ÇÄ*exp(im*k*x[1])
  # ‚àáœï·µ¢‚Çô(x) = VectorValue(k*(Œ∑‚ÇÄ*œâ/k)*(cosh(k*(x[2])) / sinh(k*H‚ÇÄ))*exp(im*k*x[1]), -im*(Œ∑‚ÇÄ*œâ)*(sinh(k*(x[2])) / sinh(k*H‚ÇÄ))*exp(im*k*x[1]))


  Œ∑‚ÇÄ = 1
  Œ∑·µ¢‚Çô(x) = Œ∑‚ÇÄ*exp(im*k*x[1])
  # œï·µ¢‚Çô(x) = (-im*Œ∑‚ÇÄ*g/œâ)*(a‚ÇÅ*k^4 - a‚ÇÇ*k^2 + 1)*(cosh(k*(x[2])) / cosh(k*H‚ÇÄ))*exp(im*k*x[1])
  v·µ¢‚Çô(x) = (k*Œ∑‚ÇÄ*g/œâ)*(a‚ÇÅ*k^4 - a‚ÇÇ*k^2 + 1)*(cosh(k*(x[2])) / cosh(k*H‚ÇÄ))*exp(im*k*x[1])
  vz·µ¢‚Çô(x) = (-k*im*Œ∑‚ÇÄ*g/œâ)*(a‚ÇÅ*k^4 - a‚ÇÇ*k^2 + 1)*(sinh(k*(x[2])) / cosh(k*H‚ÇÄ))*exp(im*k*x[1])
 
  # Numerics constants
  
  order = 4
  h = 1/(n_elements*Lb)
  Œ≥ = 100.0*order*(order-1)/h
  Œ≤‚Çï = 0.5
  Œ±‚Çï = -im*œâ/g * (1-Œ≤‚Çï)/Œ≤‚Çï

  # Damping [method 5 (added terms dyn BC and kin BC), ramp function shape 1 - Kim(2014)]
  @unpack Œº‚ÇÄ = params
  @show Œº‚ÇÄ

  function Œº‚ÇÅ·µ¢‚Çô(x)

      if 0 <= x[1] < Ld
          return Œº‚ÇÄ * (1.0 - sin(œÄ/2*(x[1]) / Ld))
      else
          return 0.0
      end
  end

  function Œº‚ÇÅ‚Çí·µ§‚Çú(x)
    
    if xd‚Çí·µ§‚Çú <= x[1] < L‚Çú‚Çí‚Çú
        return Œº‚ÇÄ*(1.0 - cos(œÄ/2*(x[1]-xd‚Çí·µ§‚Çú)/Ld))
    else
        return 0.0
    end
  end

  add_term = 0.5*((4*k*g +2) + ‚àö((4*k*g +2)^2 - 4))

  Œº‚ÇÇ·µ¢‚Çô(x) = Œº‚ÇÅ·µ¢‚Çô(x)*k*add_term
  Œº‚ÇÇ‚Çí·µ§‚Çú(x) = Œº‚ÇÅ‚Çí·µ§‚Çú(x)*k*add_term
  Œ∑d(x) = Œº‚ÇÇ·µ¢‚Çô(x)*Œ∑·µ¢‚Çô(x)
  ‚àá‚Çôœïd(x) = Œº‚ÇÅ·µ¢‚Çô(x)*vz·µ¢‚Çô(x)

  # Fluid model
  ùíØ_Œ© = DiscreteModelFromFile(mesh_file)
  println("Model loaded")

  # Triangulations
  Œ© = Interior(ùíØ_Œ©)
  Œì = Boundary(ùíØ_Œ©,tags=["beam","damping_in","damping_out"])
  Œì·µ¢‚Çô = Boundary(ùíØ_Œ©,tags="inlet")
  Œìb = Boundary(ùíØ_Œ©,tags=["damping_in","beam","damping_out"])
  # Œìd1 = Boundary(ùíØ_Œ©,tags="damping_in")
  # Œìd2 = Boundary(ùíØ_Œ©,tags="damping_out")
  Œõb = Skeleton(Œì)

  
  filename = resDir*name
  writevtk(Œ©,filename*"_O_trian.vtu")
  writevtk(Œìb,filename*"_Gb_trian.vtu")
  # writevtk(Œìd1,filename*"_Gd1_trian.vtu")
  # writevtk(Œìd2,filename*"_Gd2_trian.vtu")
  writevtk(Œõb,filename*"_Lb_trian.vtu")

  # Measures
  degree = 2*order
  dŒ© = Measure(Œ©,degree)
  dŒìb = Measure(Œìb,degree)
  dŒì = Measure(Œì,degree)
  # dŒìd1 = Measure(Œìd1,degree)
  # dŒìd2 = Measure(Œìd2,degree)
  dŒì·µ¢‚Çô = Measure(Œì·µ¢‚Çô,degree)
  dŒõb = Measure(Œõb,degree)

  # Normals
  nŒõb = get_normal_vector(Œõb)

  # FE spaces
  reffe = ReferenceFE(lagrangian,Float64,order)
  V_Œ© = TestFESpace(Œ©, reffe, conformity=:H1, vector_type=Vector{ComplexF64})
  V_ŒìŒ∑ = TestFESpace(Œì, reffe, conformity=:H1, vector_type=Vector{ComplexF64})
  U_Œ© = TrialFESpace(V_Œ©)
  U_ŒìŒ∑ = TrialFESpace(V_ŒìŒ∑)
  X = MultiFieldFESpace([U_Œ©,U_ŒìŒ∑])
  Y = MultiFieldFESpace([V_Œ©,V_ŒìŒ∑])


  # Weak form (bending + tensile force)
  ‚àá‚Çô(œï) = ‚àá(œï)‚ãÖVectorValue(0.0,1.0)
  a((œï,Œ∑),(w,v)) = ‚à´(  ‚àá(w)‚ãÖ‚àá(œï) )dŒ©   +
  ‚à´(  v*((-œâ^2*d‚ÇÄ + 1)*Œ∑ - im*œâ/g*œï) + a‚ÇÅ*Œî(v)*Œî(Œ∑) + a‚ÇÇ*‚àá(v)‚ãÖ‚àá(Œ∑) + im*œâ*w*Œ∑ - Œº‚ÇÇ·µ¢‚Çô*Œ∑*w + (1/g)*(Œº‚ÇÅ·µ¢‚Çô*‚àá‚Çô(œï)*v) - Œº‚ÇÇ‚Çí·µ§‚Çú*Œ∑*w + (1/g)*(Œº‚ÇÅ‚Çí·µ§‚Çú*‚àá‚Çô(œï)*v)  )dŒìb  +
  ‚à´(  a‚ÇÅ*( - jump(‚àá(v)‚ãÖnŒõb) * mean(Œî(Œ∑)) - mean(Œî(v)) * jump(‚àá(Œ∑)‚ãÖnŒõb) + Œ≥*( jump(‚àá(v)‚ãÖnŒõb) * jump(‚àá(Œ∑)‚ãÖnŒõb) ) ) )dŒõb
  l((w,v)) =  ‚à´( w*v·µ¢‚Çô )dŒì·µ¢‚Çô - ‚à´( Œ∑d*w - ‚àá‚Çôœïd*v )dŒìb


  # solver
  op = AffineFEOperator(a,l,X,Y)
  println("Operator created")
  (œï‚Çï,Œ∑‚Çï) = Gridap.solve(op)
  println("Operator solved")

  xy_cp = get_cell_points(get_fe_dof_basis(V_ŒìŒ∑)).cell_phys_point
  x_cp = [[xy_ij[1] for xy_ij in xy_i] for xy_i in xy_cp]
  Œ∑_cdv = get_cell_dof_values(Œ∑‚Çï)
  p = sortperm(x_cp[1])
  x_cp_sorted = [x_i[p] for x_i in x_cp]
  Œ∑_cdv_sorted = [Œ∑_i[p] for Œ∑_i in Œ∑_cdv]
  xs = [(x_i-6*Lb)/Lb for x_i in vcat(x_cp_sorted...)]
  Œ∑_rel_xs = [abs(Œ∑_i)/Œ∑‚ÇÄ for Œ∑_i in vcat(Œ∑_cdv_sorted...)]

  # exporting VTK output
  # writevtk(ŒìŒ∫,filename*"_kappa",cellfields=["eta_re"=>real(Œ∫‚Çï),"eta_im"=>imag(Œ∫‚Çï)])
  writevtk(Œì,filename*"_eta.vtu",cellfields=["eta_re"=>real(Œ∑‚Çï),"eta_im"=>imag(Œ∑‚Çï)])
  writevtk(Œ©,filename*"_phi.vtu",cellfields=["phi_re"=>real(œï‚Çï),"phi_im"=>imag(œï‚Çï)])
  writevtk(Œì,filename*"_eta_in.vtu",cellfields=["eta_re"=>x->real(Œ∑·µ¢‚Çô(x)),"eta_im"=>x->imag(Œ∑·µ¢‚Çô(x))])
  writevtk(Œì,filename*"_vz_in.vtu",cellfields=["vz_re"=>x->real(vz·µ¢‚Çô(x)),"vz_im"=>x->imag(vz·µ¢‚Çô(x))])

  return (xs,Œ∑_rel_xs)

end

end
